# -*- coding: utf-8 -*-
"""Pdf to Excel file .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16LByB1FmsnQHxDRF6dlimXqKVQl9z2WE
"""

# Step 1: Install necessary packages
# !pip install pdfplumber pandas openpyxl

# Step 2: Upload PDF file
from google.colab import files

print("üì§ Please upload a PDF file...")
uploaded = files.upload()

import os
import pdfplumber
import pandas as pd

# Get the uploaded file name
pdf_path = list(uploaded.keys())[0]
base_name = os.path.splitext(pdf_path)[0]
excel_path = f"{base_name}.xlsx"

# Step 3: Convert PDF to Excel (with fallback for text-only PDFs)
def pdf_to_excel(pdf_path, excel_path):
    all_tables = []
    text_fallback = []

    with pdfplumber.open(pdf_path) as pdf:
        for i, page in enumerate(pdf.pages):
            tables = page.extract_tables()
            if tables:
                for table in tables:
                    if table:
                        df = pd.DataFrame(table[1:], columns=table[0])
                        df['Source_Page'] = i + 1
                        all_tables.append(df)
            else:
                # Fallback: extract text if no table found
                text = page.extract_text()
                if text:
                    text_fallback.append({'Page': i + 1, 'Text': text.strip()})

    if all_tables:
        final_df = pd.concat(all_tables, ignore_index=True)
        final_df.to_excel(excel_path, index=False)
        print(f"‚úÖ Tables found and saved to: {excel_path}")
    elif text_fallback:
        fallback_df = pd.DataFrame(text_fallback)
        fallback_df.to_excel(excel_path, index=False)
        print(f"‚ÑπÔ∏è No tables found. Extracted text saved to: {excel_path}")
    else:
        print("‚ùå No content could be extracted from the PDF.")

# Convert and save
pdf_to_excel(pdf_path, excel_path)

# Step 4: Provide download link
files.download(excel_path)
